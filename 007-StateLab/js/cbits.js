// Generated by CoffeeScript 2.5.1
// Givet ett antal heltal, t ex [1,2,4,8,15,30].
// Kombinera ihop dem s책 att ett visst heltal skapas, t ex 47
// @lst inneh책ller heltalen
// @nr inneh책ller summan
// @pattern anger vilka heltal som ska anv채ndas
var M;

export var CBits = class CBits {
  constructor(lst, nr1 = 0) {
    this.lst = lst;
    this.nr = nr1;
    this.pattern = _.map(this.lst, function() {
      return 0;
    });
    this.setNr(this.nr);
  }

  setBit(index) {
    if (this.pattern[index] === 0) {
      this.nr += this.lst[index];
    }
    return this.pattern[index] = 1;
  }

  clrBit(index) {
    if (this.pattern[index] === 1) {
      this.nr -= this.lst[index];
    }
    return this.pattern[index] = 0;
  }

  flipBit(index) {
    if (this.pattern[index] === 1) {
      return this.clrBit(index);
    } else {
      return this.setBit(index);
    }
  }

  setNr(nr) {
    var i, results;
    this.nr = nr;
    i = this.lst.length;
    results = [];
    while (i > 0) {
      i--;
      if (nr >= this.lst[i]) {
        nr -= this.lst[i];
        results.push(this.pattern[i] = 1);
      } else {
        results.push(this.pattern[i] = 0);
      }
    }
    return results;
  }

};

M = new CBits([1, 2, 4, 8, 15, 30], 20);

assert([1, 0, 1, 0, 1, 0], M.pattern);

M.clrBit(2);

assert([1, 0, 0, 0, 1, 0], M.pattern);

assert(16, M.nr);

M.setBit(3);

assert([1, 0, 0, 1, 1, 0], M.pattern);

assert(24, M.nr);

M.setBit(5);

assert([1, 0, 0, 1, 1, 1], M.pattern);

assert(54, M.nr);

M.flipBit(5);

assert([1, 0, 0, 1, 1, 0], M.pattern);

assert(24, M.nr);

M.flipBit(5);

assert([1, 0, 0, 1, 1, 1], M.pattern);

assert(54, M.nr);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2JpdHMuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcY2JpdHMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFJOEM7Ozs7O0FBQUEsSUFBQTs7QUFFOUMsT0FBQSxJQUFhLFFBQU4sTUFBQSxNQUFBO0VBQ04sV0FBYyxJQUFBLFFBQVUsQ0FBVixDQUFBO0lBQUMsSUFBQyxDQUFBO0lBQUksSUFBQyxDQUFBO0lBQ3BCLElBQUMsQ0FBQSxPQUFELEdBQVcsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxJQUFDLENBQUEsR0FBUCxFQUFZLFFBQUEsQ0FBQSxDQUFBO2FBQUc7SUFBSCxDQUFaO0lBQ1gsSUFBQyxDQUFBLEtBQUQsQ0FBTyxJQUFDLENBQUEsRUFBUjtFQUZhOztFQUlkLE1BQVMsQ0FBQyxLQUFELENBQUE7SUFDUixJQUFHLElBQUMsQ0FBQSxPQUFPLENBQUMsS0FBRCxDQUFSLEtBQW1CLENBQXRCO01BQTZCLElBQUMsQ0FBQSxFQUFELElBQU8sSUFBQyxDQUFBLEdBQUcsQ0FBQyxLQUFELEVBQXhDOztXQUNBLElBQUMsQ0FBQSxPQUFPLENBQUMsS0FBRCxDQUFSLEdBQWtCO0VBRlY7O0VBSVQsTUFBUyxDQUFDLEtBQUQsQ0FBQTtJQUNSLElBQUcsSUFBQyxDQUFBLE9BQU8sQ0FBQyxLQUFELENBQVIsS0FBbUIsQ0FBdEI7TUFBNkIsSUFBQyxDQUFBLEVBQUQsSUFBTyxJQUFDLENBQUEsR0FBRyxDQUFDLEtBQUQsRUFBeEM7O1dBQ0EsSUFBQyxDQUFBLE9BQU8sQ0FBQyxLQUFELENBQVIsR0FBa0I7RUFGVjs7RUFJVCxPQUFVLENBQUMsS0FBRCxDQUFBO0lBQ1QsSUFBRyxJQUFDLENBQUEsT0FBTyxDQUFDLEtBQUQsQ0FBUixLQUFtQixDQUF0QjthQUE2QixJQUFDLENBQUEsTUFBRCxDQUFRLEtBQVIsRUFBN0I7S0FBQSxNQUFBO2FBQWdELElBQUMsQ0FBQSxNQUFELENBQVEsS0FBUixFQUFoRDs7RUFEUzs7RUFHVixLQUFRLENBQUMsRUFBRCxDQUFBO0FBQ1QsUUFBQSxDQUFBLEVBQUE7SUFBRSxJQUFDLENBQUEsRUFBRCxHQUFNO0lBQ04sQ0FBQSxHQUFJLElBQUMsQ0FBQSxHQUFHLENBQUM7QUFDVDtXQUFNLENBQUEsR0FBSSxDQUFWO01BQ0MsQ0FBQTtNQUNBLElBQUcsRUFBQSxJQUFNLElBQUMsQ0FBQSxHQUFHLENBQUMsQ0FBRCxDQUFiO1FBQ0MsRUFBQSxJQUFNLElBQUMsQ0FBQSxHQUFHLENBQUMsQ0FBRDtxQkFDVixJQUFDLENBQUEsT0FBTyxDQUFDLENBQUQsQ0FBUixHQUFjLEdBRmY7T0FBQSxNQUFBO3FCQUdLLElBQUMsQ0FBQSxPQUFPLENBQUMsQ0FBRCxDQUFSLEdBQWMsR0FIbkI7O0lBRkQsQ0FBQTs7RUFITzs7QUFoQkY7O0FBMEJQLENBQUEsR0FBSSxJQUFJLEtBQUosQ0FBVSxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxFQUFULEVBQVksRUFBWixDQUFWLEVBQTBCLEVBQTFCOztBQUNKLE1BQUEsQ0FBTyxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxDQUFQLEVBQXNCLENBQUMsQ0FBQyxPQUF4Qjs7QUFFQSxDQUFDLENBQUMsTUFBRixDQUFTLENBQVQ7O0FBQ0EsTUFBQSxDQUFPLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLENBQVQsRUFBVyxDQUFYLENBQVAsRUFBc0IsQ0FBQyxDQUFDLE9BQXhCOztBQUNBLE1BQUEsQ0FBTyxFQUFQLEVBQVcsQ0FBQyxDQUFDLEVBQWI7O0FBRUEsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxDQUFUOztBQUNBLE1BQUEsQ0FBTyxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxDQUFQLEVBQXNCLENBQUMsQ0FBQyxPQUF4Qjs7QUFDQSxNQUFBLENBQU8sRUFBUCxFQUFXLENBQUMsQ0FBQyxFQUFiOztBQUVBLENBQUMsQ0FBQyxNQUFGLENBQVMsQ0FBVDs7QUFDQSxNQUFBLENBQU8sQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsQ0FBVCxFQUFXLENBQVgsQ0FBUCxFQUFzQixDQUFDLENBQUMsT0FBeEI7O0FBQ0EsTUFBQSxDQUFPLEVBQVAsRUFBVyxDQUFDLENBQUMsRUFBYjs7QUFFQSxDQUFDLENBQUMsT0FBRixDQUFVLENBQVY7O0FBQ0EsTUFBQSxDQUFPLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLENBQVQsRUFBVyxDQUFYLENBQVAsRUFBc0IsQ0FBQyxDQUFDLE9BQXhCOztBQUNBLE1BQUEsQ0FBTyxFQUFQLEVBQVcsQ0FBQyxDQUFDLEVBQWI7O0FBRUEsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxDQUFWOztBQUNBLE1BQUEsQ0FBTyxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxDQUFQLEVBQXNCLENBQUMsQ0FBQyxPQUF4Qjs7QUFDQSxNQUFBLENBQU8sRUFBUCxFQUFXLENBQUMsQ0FBQyxFQUFiIiwic291cmNlc0NvbnRlbnQiOlsiIyBHaXZldCBldHQgYW50YWwgaGVsdGFsLCB0IGV4IFsxLDIsNCw4LDE1LDMwXS5cclxuIyBLb21iaW5lcmEgaWhvcCBkZW0gc8OlIGF0dCBldHQgdmlzc3QgaGVsdGFsIHNrYXBhcywgdCBleCA0N1xyXG4jIEBsc3QgaW5uZWjDpWxsZXIgaGVsdGFsZW5cclxuIyBAbnIgaW5uZWjDpWxsZXIgc3VtbWFuXHJcbiMgQHBhdHRlcm4gYW5nZXIgdmlsa2EgaGVsdGFsIHNvbSBza2EgYW52w6RuZGFzXHJcblxyXG5leHBvcnQgY2xhc3MgQ0JpdHNcclxuXHRjb25zdHJ1Y3RvciA6IChAbHN0LEBucj0wKSAtPiBcclxuXHRcdEBwYXR0ZXJuID0gXy5tYXAgQGxzdCwgLT4gMFxyXG5cdFx0QHNldE5yIEBuclxyXG5cdFxyXG5cdHNldEJpdCA6IChpbmRleCkgLT5cclxuXHRcdGlmIEBwYXR0ZXJuW2luZGV4XSA9PSAwIHRoZW4gQG5yICs9IEBsc3RbaW5kZXhdXHJcblx0XHRAcGF0dGVybltpbmRleF0gPSAxXHJcblx0XHJcblx0Y2xyQml0IDogKGluZGV4KSAtPlxyXG5cdFx0aWYgQHBhdHRlcm5baW5kZXhdID09IDEgdGhlbiBAbnIgLT0gQGxzdFtpbmRleF1cclxuXHRcdEBwYXR0ZXJuW2luZGV4XSA9IDBcclxuXHJcblx0ZmxpcEJpdCA6IChpbmRleCkgLT5cclxuXHRcdGlmIEBwYXR0ZXJuW2luZGV4XSA9PSAxIHRoZW4gQGNsckJpdCBpbmRleCBlbHNlIEBzZXRCaXQgaW5kZXhcclxuXHRcclxuXHRzZXROciA6IChucikgLT5cclxuXHRcdEBuciA9IG5yXHJcblx0XHRpID0gQGxzdC5sZW5ndGhcclxuXHRcdHdoaWxlIGkgPiAwXHJcblx0XHRcdGktLVxyXG5cdFx0XHRpZiBuciA+PSBAbHN0W2ldXHJcblx0XHRcdFx0bnIgLT0gQGxzdFtpXVxyXG5cdFx0XHRcdEBwYXR0ZXJuW2ldID0gMSBcclxuXHRcdFx0ZWxzZSBAcGF0dGVybltpXSA9IDBcclxuXHJcbk0gPSBuZXcgQ0JpdHMgWzEsMiw0LDgsMTUsMzBdLDIwXHJcbmFzc2VydCBbMSwwLDEsMCwxLDBdLCBNLnBhdHRlcm5cclxuXHJcbk0uY2xyQml0IDJcclxuYXNzZXJ0IFsxLDAsMCwwLDEsMF0sIE0ucGF0dGVyblxyXG5hc3NlcnQgMTYsIE0ubnJcclxuXHJcbk0uc2V0Qml0IDNcclxuYXNzZXJ0IFsxLDAsMCwxLDEsMF0sIE0ucGF0dGVyblxyXG5hc3NlcnQgMjQsIE0ubnJcclxuXHJcbk0uc2V0Qml0IDVcclxuYXNzZXJ0IFsxLDAsMCwxLDEsMV0sIE0ucGF0dGVyblxyXG5hc3NlcnQgNTQsIE0ubnJcclxuXHJcbk0uZmxpcEJpdCA1XHJcbmFzc2VydCBbMSwwLDAsMSwxLDBdLCBNLnBhdHRlcm5cclxuYXNzZXJ0IDI0LCBNLm5yXHJcblxyXG5NLmZsaXBCaXQgNVxyXG5hc3NlcnQgWzEsMCwwLDEsMSwxXSwgTS5wYXR0ZXJuXHJcbmFzc2VydCA1NCwgTS5uclxyXG4iXX0=
//# sourceURL=c:\github\2022-007-StateLab\coffee\cbits.coffee