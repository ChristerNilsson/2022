// Generated by CoffeeScript 2.5.1
// Egentligen räcker det att spara minutes,seconds,handicap,number960
// samt clocks, paused, player och timeout
// Av effektivitetsskäl lagras även deriverade resultat i localStorage
var clone;

import {
  globals,
  pretty,
  logg
} from './globals.js';

import {
  getOrange,
  getWhite,
  getGreen
} from './globals.js';

clone = function(x) {
  return JSON.parse(JSON.stringify(x));
};

export var CSettings = class CSettings {
  constructor() {
    console.log(localStorage.settings ? logg("load") : logg("default"));
    if (localStorage.settings) {
      Object.assign(this, JSON.parse(localStorage.settings));
    }
    this.bits || (this.bits = {
      minutes: 3,
      seconds: 2,
      handicap: 0,
      number960: 518
    });
    this.bonus || (this.bonus = [
      '',
      '' // redundant, sparar tid
    ]);
    this.bonuses || (this.bonuses = [
      2 * 60,
      2 * 60 // tertier, redundant, sparar tid
    ]);
    this.chess960 || (this.chess960 = 'RNBQKBNR'); // redundant, sparar tid
    this.clocks || (this.clocks = [
      180 * 60,
      180 * 60 // tertier
    ]);
    this.info || (this.info = {
      orange: '',
      white: '3+2',
      green: '' // redundant, sparar tid
    });
    this.paused = true;
    this.player || (this.player = -1);
    this.timeout || (this.timeout = false);
    // Dessa fyra objekt vill man inte spara i localStorage
    this.settings2bits();
    this.makeHandicap();
    this.save();
  }

  bits2settings() {
    var gb;
    gb = globals.bits;
    this.bits.minutes = gb.minutes.nr;
    this.bits.seconds = gb.seconds.nr;
    this.bits.handicap = gb.handicap.nr;
    return this.bits.number960 = gb.number960.nr;
  }

  settings2bits() {
    var gb;
    gb = globals.bits;
    gb.minutes.setNr(this.bits.minutes);
    gb.seconds.setNr(this.bits.seconds);
    gb.handicap.setNr(this.bits.handicap);
    return gb.number960.setNr(this.bits.number960);
  }

  backup() {
    this.bits2settings();
    return globals.backup = clone(this); // kopierar TILL backup
  }

  restore() {
    Object.assign(this, globals.backup); // kopierar FRÅN backup
    return this.settings2bits();
  }

  tick() {
    var c;
    if (this.paused) {
      return;
    }
    c = this.clocks[this.player];
    if (c > 0) {
      c -= 60 / frameRate();
    }
    if (c <= 0) {
      c = 0;
      this.timeout = true;
      this.paused = true;
    }
    return this.clocks[this.player] = c;
  }

  save() {
    var d, lastStorageSave;
    d = new Date();
    if (d - lastStorageSave < globals.HEARTBEAT) { // ms
      return;
    }
    lastStorageSave = d;
    logg('save');
    this.bits2settings();
    return localStorage.settings = JSON.stringify(this);
  }

  compact() {
    var g, gb, header, header0, header1;
    header0 = '';
    header1 = '';
    g = globals;
    gb = g.bits;
    if (gb.minutes.nr > 0) {
      header0 += gb.minutes.nr;
    }
    if (gb.seconds.nr > 0) {
      header1 += gb.seconds.nr;
    }
    header = header0;
    if (header1.length > 0) {
      header += '+' + header1;
    }
    if (gb.handicap.nr > 0) {
      header += `\n(${gb.handicap.nr})`;
    }
    return header;
  }

  makeHandicap() {
    var bonus, g, gb, hcp, refl;
    g = globals;
    gb = g.bits;
    refl = g.MINUTE * gb.minutes.nr; // tertier
    bonus = g.SEC * gb.seconds.nr; // tertier
    hcp = gb.handicap.nr / 60; // 0/60 to 59/60
    this.players = [];
    this.players[0] = [refl * (1 + hcp), bonus * (1 + hcp)];
    return this.players[1] = [refl * (1 - hcp), bonus * (1 - hcp)];
  }

  ok() {
    var g, gs;
    g = globals;
    gs = g.settings;
    this.makeHandicap();
    this.clocks = [this.players[0][0], this.players[1][0]];
    this.bonuses = [this.players[0][1], this.players[1][1]];
    this.bonus = ['+' + pretty(gs.bonuses[0]), '+' + pretty(gs.bonuses[1])];
    this.info.orange = getOrange();
    this.info.white = getWhite();
    this.info.green = getGreen();
    this.timeout = false;
    this.paused = true;
    return this.player = -1;
  }

  cancel() {
    this.restore();
    return this.paused = true;
  }

};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcc2V0dGluZ3MuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFcUU7OztBQUFBLElBQUE7O0FBRXJFLE9BQUE7RUFBUSxPQUFSO0VBQWdCLE1BQWhCO0VBQXVCLElBQXZCO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVEsU0FBUjtFQUFrQixRQUFsQjtFQUEyQixRQUEzQjtDQUFBLE1BQUE7O0FBRUEsS0FBQSxHQUFRLFFBQUEsQ0FBQyxDQUFELENBQUE7U0FBTyxJQUFJLENBQUMsS0FBTCxDQUFXLElBQUksQ0FBQyxTQUFMLENBQWUsQ0FBZixDQUFYO0FBQVA7O0FBRVIsT0FBQSxJQUFhLFlBQU4sTUFBQSxVQUFBO0VBQ04sV0FBYyxDQUFBLENBQUE7SUFDYixPQUFPLENBQUMsR0FBUixDQUFlLFlBQVksQ0FBQyxRQUFoQixHQUE4QixJQUFBLENBQUssTUFBTCxDQUE5QixHQUErQyxJQUFBLENBQUssU0FBTCxDQUEzRDtJQUNBLElBQUcsWUFBWSxDQUFDLFFBQWhCO01BQThCLE1BQU0sQ0FBQyxNQUFQLENBQWMsSUFBZCxFQUFpQixJQUFJLENBQUMsS0FBTCxDQUFXLFlBQVksQ0FBQyxRQUF4QixDQUFqQixFQUE5Qjs7SUFDQSxJQUFDLENBQUEsU0FBRCxJQUFDLENBQUEsT0FBUztNQUFDLE9BQUEsRUFBUSxDQUFUO01BQVksT0FBQSxFQUFRLENBQXBCO01BQXVCLFFBQUEsRUFBUyxDQUFoQztNQUFtQyxTQUFBLEVBQVU7SUFBN0M7SUFDVixJQUFDLENBQUEsVUFBRCxJQUFDLENBQUEsUUFBVTtNQUFDLEVBQUQ7TUFBSSxFQUFKOztJQUNYLElBQUMsQ0FBQSxZQUFELElBQUMsQ0FBQSxVQUFZO01BQUMsQ0FBQSxHQUFFLEVBQUg7TUFBTSxDQUFBLEdBQUUsRUFBUjs7SUFDYixJQUFDLENBQUEsYUFBRCxJQUFDLENBQUEsV0FBYSxZQUxoQjtJQU1FLElBQUMs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QUFBO0lBQ1IsSUFBQyxDQUFBLE9BQUQsQ0FBQTtXQUNBLElBQUMsQ0FBQSxNQUFELEdBQVU7RUFGRjs7QUEvRkgiLCJzb3VyY2VzQ29udGVudCI6WyIjIEVnZW50bGlnZW4gcsOkY2tlciBkZXQgYXR0IHNwYXJhIG1pbnV0ZXMsc2Vjb25kcyxoYW5kaWNhcCxudW1iZXI5NjBcclxuIyBzYW10IGNsb2NrcywgcGF1c2VkLCBwbGF5ZXIgb2NoIHRpbWVvdXRcclxuIyBBdiBlZmZla3Rpdml0ZXRzc2vDpGwgbGFncmFzIMOkdmVuIGRlcml2ZXJhZGUgcmVzdWx0YXQgaSBsb2NhbFN0b3JhZ2VcclxuXHJcbmltcG9ydCB7Z2xvYmFscyxwcmV0dHksbG9nZ30gZnJvbSAnLi9nbG9iYWxzLmpzJ1xyXG5pbXBvcnQge2dldE9yYW5nZSxnZXRXaGl0ZSxnZXRHcmVlbn0gZnJvbSAnLi9nbG9iYWxzLmpzJ1xyXG5cclxuY2xvbmUgPSAoeCkgLT4gSlNPTi5wYXJzZSBKU09OLnN0cmluZ2lmeSB4XHJcblxyXG5leHBvcnQgY2xhc3MgQ1NldHRpbmdzXHJcblx0Y29uc3RydWN0b3IgOiAtPiBcclxuXHRcdGNvbnNvbGUubG9nIGlmIGxvY2FsU3RvcmFnZS5zZXR0aW5ncyB0aGVuIGxvZ2cgXCJsb2FkXCIgZWxzZSBsb2dnIFwiZGVmYXVsdFwiXHJcblx0XHRpZiBsb2NhbFN0b3JhZ2Uuc2V0dGluZ3MgdGhlbiBPYmplY3QuYXNzaWduIEAsIEpTT04ucGFyc2UgbG9jYWxTdG9yYWdlLnNldHRpbmdzXHJcblx0XHRAYml0cyB8fD0ge21pbnV0ZXM6Mywgc2Vjb25kczoyLCBoYW5kaWNhcDowLCBudW1iZXI5NjA6NTE4fVxyXG5cdFx0QGJvbnVzIHx8PSBbJycsJyddICMgcmVkdW5kYW50LCBzcGFyYXIgdGlkXHJcblx0XHRAYm9udXNlcyB8fD0gWzIqNjAsMio2MF0gIyB0ZXJ0aWVyLCByZWR1bmRhbnQsIHNwYXJhciB0aWRcclxuXHRcdEBjaGVzczk2MCB8fD0gJ1JOQlFLQk5SJyAjIHJlZHVuZGFudCwgc3BhcmFyIHRpZFxyXG5cdFx0QGNsb2NrcyB8fD0gWzE4MCo2MCwxODAqNjBdICMgdGVydGllclxyXG5cdFx0QGluZm8gfHw9IHtvcmFuZ2U6JycsIHdoaXRlOiczKzInLCBncmVlbjonJ30gIyByZWR1bmRhbnQsIHNwYXJhciB0aWRcclxuXHRcdEBwYXVzZWQgPSB0cnVlXHJcblx0XHRAcGxheWVyIHx8PSAtMVxyXG5cdFx0QHRpbWVvdXQgfHw9IGZhbHNlXHJcblxyXG5cdFx0IyBEZXNzYSBmeXJhIG9iamVrdCB2aWxsIG1hbiBpbnRlIHNwYXJhIGkgbG9jYWxTdG9yYWdlXHJcblx0XHRAc2V0dGluZ3MyYml0cygpXHJcblx0XHRAbWFrZUhhbmRpY2FwKClcclxuXHRcdEBzYXZlKClcclxuXHJcblx0Yml0czJzZXR0aW5ncyA6IC0+XHJcblx0XHRnYiA9IGdsb2JhbHMuYml0c1xyXG5cdFx0QGJpdHMubWludXRlcyAgID0gZ2IubWludXRlcy5uclxyXG5cdFx0QGJpdHMuc2Vjb25kcyAgID0gZ2Iuc2Vjb25kcy5uclxyXG5cdFx0QGJpdHMuaGFuZGljYXAgID0gZ2IuaGFuZGljYXAubnJcclxuXHRcdEBiaXRzLm51bWJlcjk2MCA9IGdiLm51bWJlcjk2MC5uclxyXG5cdFxyXG5cdHNldHRpbmdzMmJpdHMgOiAtPlxyXG5cdFx0Z2IgPSBnbG9iYWxzLmJpdHNcclxuXHRcdGdiLm1pbnV0ZXMuc2V0TnIgICBAYml0cy5taW51dGVzXHJcblx0XHRnYi5zZWNvbmRzLnNldE5yICAgQGJpdHMuc2Vjb25kc1xyXG5cdFx0Z2IuaGFuZGljYXAuc2V0TnIgIEBiaXRzLmhhbmRpY2FwXHJcblx0XHRnYi5udW1iZXI5NjAuc2V0TnIgQGJpdHMubnVtYmVyOTYwXHJcblxyXG5cdGJhY2t1cCA6IC0+XHJcblx0XHRAYml0czJzZXR0aW5ncygpXHJcblx0XHRnbG9iYWxzLmJhY2t1cCA9IGNsb25lIEAgIyBrb3BpZXJhciBUSUxMIGJhY2t1cFxyXG5cclxuXHRyZXN0b3JlIDogLT5cclxuXHRcdE9iamVjdC5hc3NpZ24gQCxnbG9iYWxzLmJhY2t1cCAjIGtvcGllcmFyIEZSw4VOIGJhY2t1cFxyXG5cdFx0QHNldHRpbmdzMmJpdHMoKVxyXG5cclxuXHR0aWNrIDogLT5cclxuXHRcdGlmIEBwYXVzZWQgdGhlbiByZXR1cm5cclxuXHRcdGMgPSBAY2xvY2tzW0BwbGF5ZXJdXHJcblx0XHRpZiBjID4gMCB0aGVuIGMgLT0gNjAvZnJhbWVSYXRlKClcclxuXHRcdGlmIGMgPD0gMFxyXG5cdFx0XHRjID0gMFxyXG5cdFx0XHRAdGltZW91dCA9IHRydWVcclxuXHRcdFx0QHBhdXNlZCA9IHRydWVcclxuXHRcdEBjbG9ja3NbQHBsYXllcl0gPSBjXHJcblxyXG5cdHNhdmUgOiAtPlxyXG5cdFx0ZCA9IG5ldyBEYXRlKClcclxuXHRcdGlmIGQgLSBsYXN0U3RvcmFnZVNhdmUgPCBnbG9iYWxzLkhFQVJUQkVBVCB0aGVuIHJldHVybiAjIG1zXHJcblx0XHRsYXN0U3RvcmFnZVNhdmUgPSBkXHJcblx0XHRsb2dnICdzYXZlJ1xyXG5cdFx0QGJpdHMyc2V0dGluZ3MoKVxyXG5cdFx0bG9jYWxTdG9yYWdlLnNldHRpbmdzID0gSlNPTi5zdHJpbmdpZnkgQFxyXG5cclxuXHRjb21wYWN0IDogLT5cclxuXHRcdGhlYWRlcjAgPSAnJ1xyXG5cdFx0aGVhZGVyMSA9ICcnXHJcblx0XHRnID0gZ2xvYmFsc1xyXG5cdFx0Z2IgPSBnLmJpdHNcclxuXHRcdGlmIGdiLm1pbnV0ZXMubnIgPiAwIHRoZW4gaGVhZGVyMCArPSBnYi5taW51dGVzLm5yXHJcblx0XHRpZiBnYi5zZWNvbmRzLm5yID4gMCB0aGVuIGhlYWRlcjEgKz0gZ2Iuc2Vjb25kcy5uclxyXG5cdFx0aGVhZGVyID0gaGVhZGVyMFxyXG5cdFx0aWYgaGVhZGVyMS5sZW5ndGggPiAwIHRoZW4gaGVhZGVyICs9ICcrJyArIGhlYWRlcjFcclxuXHRcdGlmIGdiLmhhbmRpY2FwLm5yID4gMCB0aGVuIGhlYWRlciArPSBcIlxcbigje2diLmhhbmRpY2FwLm5yfSlcIlxyXG5cdFx0aGVhZGVyXHJcblxyXG5cdG1ha2VIYW5kaWNhcCA6IC0+XHJcblx0XHRnID0gZ2xvYmFsc1xyXG5cdFx0Z2IgPSBnLmJpdHNcclxuXHRcdHJlZmwgID0gZy5NSU5VVEUgKiBnYi5taW51dGVzLm5yICMgdGVydGllclxyXG5cdFx0Ym9udXMgPSBnLlNFQyAqIGdiLnNlY29uZHMubnIgIyB0ZXJ0aWVyXHJcblx0XHRoY3AgICA9IGdiLmhhbmRpY2FwLm5yIC8gNjAgIyAwLzYwIHRvIDU5LzYwXHJcblx0XHRAcGxheWVycyA9IFtdXHJcblx0XHRAcGxheWVyc1swXSA9IFtyZWZsKigxK2hjcCksIGJvbnVzKigxK2hjcCldXHJcblx0XHRAcGxheWVyc1sxXSA9IFtyZWZsKigxLWhjcCksIGJvbnVzKigxLWhjcCldXHJcblxyXG5cdG9rIDogLT5cclxuXHRcdGcgPSBnbG9iYWxzXHJcblx0XHRncyA9IGcuc2V0dGluZ3NcclxuXHRcdEBtYWtlSGFuZGljYXAoKVxyXG5cdFx0QGNsb2NrcyAgPSBbQHBsYXllcnNbMF1bMF0sIEBwbGF5ZXJzWzFdWzBdXVxyXG5cdFx0QGJvbnVzZXMgPSBbQHBsYXllcnNbMF1bMV0sIEBwbGF5ZXJzWzFdWzFdXVxyXG5cdFx0QGJvbnVzID0gWycrJyArIHByZXR0eShncy5ib251c2VzWzBdKSwgJysnICsgcHJldHR5KGdzLmJvbnVzZXNbMV0pXVxyXG5cdFx0QGluZm8ub3JhbmdlID0gZ2V0T3JhbmdlKClcclxuXHRcdEBpbmZvLndoaXRlID0gZ2V0V2hpdGUoKVxyXG5cdFx0QGluZm8uZ3JlZW4gPSBnZXRHcmVlbigpXHJcblx0XHRAdGltZW91dCA9IGZhbHNlXHJcblx0XHRAcGF1c2VkID0gdHJ1ZVxyXG5cdFx0QHBsYXllciA9IC0xXHJcblxyXG5cdGNhbmNlbCA6IC0+IFxyXG5cdFx0QHJlc3RvcmUoKVxyXG5cdFx0QHBhdXNlZCA9IHRydWVcclxuIl19
//# sourceURL=c:\github\2022-007-StateLab\coffee\settings.coffee