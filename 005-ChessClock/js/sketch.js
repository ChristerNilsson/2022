// Generated by CoffeeScript 2.5.1
var Button, EditButton, EditPage, MainButton, MainPage, add, bonuses, clocks, d2, draw, edit, editPage, flip, hms, left, mainPage, mouseClicked, ok, page, pause, player, preload, pretty, qr, right, round3, setup, state, swap,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

state = 0;


// 0 = paused (player in [-1,0,1])
//   player = -1 no button
//   player = 0 left button disabled
//   player = 1 right button disabled
//   PLAY
//   NEW

// 1 = not running (player==-1)
//   player = -1 both buttons
//   PAUSE

// 2 = running (player in [0,1])

// 3 = edit
//   OK
player = -1; // -1, 0=left, 1=right

clocks = [
  3 * 60,
  3 * 60 // sekunder med decimaler
];

bonuses = [
  2,
  2 // sekunder med decimaler
];

qr = null;

editPage = null;

mainPage = null;

page = null;

flip = function() {
  return this.value = 1 - this.value;
};

swap = function() {
  return editPage.hcpSwap = -editPage.hcpSwap;
};

left = function() {
  return add(0);
};

right = function() {
  return add(1);
};

add = function(p) {
  //if state == 1
  //state = 2
  if (p !== player) {
    return;
  }
  console.log(clocks[player], bonuses[player]);
  clocks[player] += bonuses[player];
  console.log(clocks[player], bonuses[player]);
  player = p;
  return mainPage.buttons['pause'].visible = true;
};

edit = function() {
  if (state === 0) {
    state = 3;
    return page = editPage;
  }
};

pause = function() {
  if (state === 1 || state === 2) {
    state = 0;
  }
  mainPage.buttons['play'].visible = true;
  return mainPage.buttons['pause'].visible = false;
};

ok = function() {
  state = 0;
  page = mainPage;
  clocks[0] = editPage.players[0][0];
  clocks[1] = editPage.players[1][0];
  bonuses[0] = editPage.players[0][1];
  bonuses[1] = editPage.players[1][1];
  return player = -1;
};

MainPage = class MainPage {
  constructor() {
    var h, w;
    this.buttons = {};
    w = width;
    h = height;
    this.buttons['left'] = new MainButton(0, 0.5 * w, 0.225 * h, 1.00 * w, 0.45 * h, left, true);
    this.buttons['right'] = new MainButton(1, 0.5 * w, 0.775 * h, 1.00 * w, 0.45 * h, right, true);
    this.buttons['play'] = new Button('play', 0.1125 * w, 0.50 * h, 0.225 * w, 0.10 * h, pause, true, true);
    this.buttons['pause'] = new Button('pause', (0.1125 + 0.225) * w, 0.50 * h, 0.225 * w, 0.10 * h, pause, false, true);
    this.buttons['new'] = new Button('new', 0.8 * w, 0.50 * h, 0.45 * w, 0.10 * h, edit, true, true);
    this.buttons['left'].upsidedown = true;
  }

  draw() {
    var key, size;
    push();
    background('black');
    for (key in this.buttons) {
      this.buttons[key].draw();
    }
    if (state === 2 && clocks[player] > 0) {
      clocks[player] -= 1 / 60;
      if (clocks[player] < 0) {
        clocks[player] = 0;
      }
    }
    pop();
    size = 0.10 * height;
    if (qr) {
      image(qr, (width - size) / 2, (height - size) / 2, size, size);
    }
    fill('black');
    textSize(0.05 * height);
    if (bonuses[0] > 0) {
      push();
      translate(width / 2, height / 2 - 0.13 * height);
      rotate(180);
      text('+' + round3(bonuses[0]) + 's', 0, 0);
      pop();
      return text('+' + round3(bonuses[1]) + 's', width / 2, height / 2 + 0.13 * height);
    }
  }

  mouseClicked() {
    var button, key;
    for (key in this.buttons) {
      button = this.buttons[key];
      if (!button.inside(mouseX, mouseY)) {
        continue;
      }
      if (key === 'left' || key === 'right') {
        button.click();
      }
      if (state === 0) {
        if (key === 'play') {
          state = player === -1 ? 1 : 2;
          this.buttons['play'].visible = false;
          this.buttons['pause'].visible = true;
          this.buttons['new'].visible = false;
        }
        if (key === 'new') {
          button.click();
        }
        return;
      }
      if (state === 1) {
        if (key === 'left') {
          player = 1;
          state = 2;
        }
        if (key === 'right') {
          player = 0;
          state = 2;
        }
        if (key === 'pause') {
          state = 0;
          this.buttons['play'].visible = true;
          this.buttons['pause'].visible = false;
          this.buttons['new'].visible = true;
        }
        return;
      }
      if (state === 2) {
        if (key === 'left') {
          player = 1;
        }
        if (key === 'right') {
          player = 0;
        }
        if (key === 'pause') {
          state = 0;
          this.buttons['play'].visible = true;
          this.buttons['pause'].visible = false;
          this.buttons['new'].visible = true;
        }
        return;
      }
    }
  }

};

// if key=='play'
// 	state=0 
// 	@buttons['play'].enabled = true
// 	@buttons['pause'].enabled = false
// 	@buttons['new'].enabled = true
EditPage = class EditPage {
  constructor() {
    var cells, dy, h, headers, j, k, len, ref, w, x, yoff;
    this.matrix = [];
    yoff = 0.08 * height;
    ref = range(6);
    for (k = 0, len = ref.length; k < len; k++) {
      j = ref[k];
      headers = 'h m s m s t'.split(' ');
      cells = [];
      x = 0.17 * width + j * 0.13 * width;
      dy = 0.09 * height;
      cells.push(new EditButton(headers[j], x, yoff + 2 * dy, flip, false));
      cells.push(new EditButton(1, x, yoff + 3 * dy, flip, true));
      cells.push(new EditButton(2, x, yoff + 4 * dy, flip, true));
      cells.push(new EditButton(4, x, yoff + 5 * dy, flip, true));
      cells.push(new EditButton(8, x, yoff + 6 * dy, flip, true));
      cells.push(new EditButton(15, x, yoff + 7 * dy, flip, true));
      cells.push(new EditButton(30, x, yoff + 8 * dy, flip, true));
      this.matrix.push(cells);
    }
    // ställ in 3m+2s (default)
    this.matrix[1][1].value = 1;
    this.matrix[1][2].value = 1;
    this.matrix[4][2].value = 1;
    // ställ in 3h+2m (default)
    // @matrix[0][1].value = 1
    // @matrix[0][2].value = 1
    // @matrix[3][2].value = 1
    this.buttons = [];
    w = width;
    h = height;
    this.buttons.push(new Button('ok', 0.5 * w, 0.89 * h, 0.17 * w, 0.04 * h, ok, true, true));
    this.buttons.push(new Button('swap', 0.5 * w, 0.08 * h, 0.17 * w, 0.04 * h, swap, true, true));
    this.sums = [0, 0, 0, 0, 0, 0];
    this.hcpSwap = 1;
  }

  draw() {
    var button, cells, header, header0, header1, headers, i, j, k, l, len, len1, len2, len3, len4, n, o, q, ref, ref1, ref2, ref3, ref4, y;
    push();
    background('black');
    fill('white');
    textSize(0.05 * height);
    text('reflection', 0.30 * width, 0.18 * height);
    text('bonus', 0.63 * width, 0.18 * height);
    text('hcp', 0.83 * width, 0.18 * height);
    fill('white');
    textSize(0.03 * height);
    headers = 'h m s m s t'.split(' ');
    this.sums = [0, 0, 0, 0, 0, 0];
    ref = this.buttons;
    for (k = 0, len = ref.length; k < len; k++) {
      button = ref[k];
      button.draw();
    }
    ref1 = range(this.matrix.length);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      cells = this.matrix[i];
      ref2 = range(cells.length);
      for (n = 0, len2 = ref2.length; n < len2; n++) {
        j = ref2[n];
        button = cells[j];
        button.draw();
        if (j !== 0) {
          this.sums[i] += button.text * button.value;
        }
      }
    }
    this.buttons[0].visible = this.sums[0] + this.sums[1] + this.sums[2] > 0;
    header0 = '';
    header1 = '';
    ref3 = range(0, 3);
    for (o = 0, len3 = ref3.length; o < len3; o++) {
      i = ref3[o];
      if (this.sums[i] > 0) {
        header0 += this.sums[i] + headers[i];
      }
    }
    ref4 = range(3, 5);
    for (q = 0, len4 = ref4.length; q < len4; q++) {
      i = ref4[q];
      if (this.sums[i] > 0) {
        header1 += this.sums[i] + headers[i];
      }
    }
    header = header0;
    if (header1.length > 0) {
      header += ' + ' + header1;
    }
    this.hcp = this.hcpSwap * this.sums[5] / 60; // 0.0 .. 1.0
    this.refl = 3600 * this.sums[0] + 60 * this.sums[1] + this.sums[2];
    this.bonus = 60 * this.sums[3] + this.sums[4];
    this.players = [];
    this.players[0] = [this.refl * (1 + this.hcp), this.bonus * (1 + this.hcp)];
    this.players[1] = [this.refl * (1 - this.hcp), this.bonus * (1 - this.hcp)];
    y = 0.08 * height;
    if (this.sums[5] === 0) { // inget handicap
      this.buttons[1].visible = false;
      fill('white');
      textSize(0.07 * height);
      text(header, 0.5 * width, y); // handicap
    } else {
      this.buttons[1].visible = true;
      fill('red');
      textAlign(LEFT, CENTER);
      left = pretty(this.players[0][0]) + ' + ' + pretty(this.players[0][1]);
      text(left, 0, y - 0.04 * height);
      fill('green');
      textAlign(RIGHT, CENTER);
      right = pretty(this.players[1][0]) + ' + ' + pretty(this.players[1][1]);
      text(right, width, y + 0.04 * height);
    }
    return pop();
  }

  mouseClicked() {
    var button, cells, k, l, len, len1, ref, ref1, results;
    ref = this.buttons;
    for (k = 0, len = ref.length; k < len; k++) {
      button = ref[k];
      if (button.inside(mouseX, mouseY)) {
        button.click();
      }
    }
    ref1 = this.matrix;
    results = [];
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      cells = ref1[l];
      results.push((function() {
        var len2, n, results1;
        results1 = [];
        for (n = 0, len2 = cells.length; n < len2; n++) {
          button = cells[n];
          if (button.visible && button.inside(mouseX, mouseY)) {
            results1.push(button.click());
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      })());
    }
    return results;
  }

};

round3 = function(x) {
  return Math.round(x * 1000) / 1000;
};

pretty = function(tot) {
  var h, header, m, s;
  s = tot % 60;
  tot = (tot - s) / 60;
  m = tot % 60;
  tot = (tot - m) / 60;
  h = tot % 60;
  header = '';
  if (h > 0) {
    header += round3(h) + 'h';
  }
  if (m > 0) {
    header += round3(m) + 'm';
  }
  if (s > 0) {
    header += round3(s) + 's';
  }
  return header;
};

d2 = function(x) {
  x = Math.trunc(x);
  if (x < 10) {
    return '0' + x;
  } else {
    return x;
  }
};

console.log(d2(3), '03');

hms = function(x) {
  var h, m, s;
  s = modulo(x, 60);
  x = Math.floor(x / 60);
  m = modulo(x, 60);
  x = Math.floor(x / 60);
  h = x;
  return [h, m, s];
};

console.log(hms(180), [0, 3, 0]);

//##############################
Button = class Button {
  constructor(text1, x1, y1, width1, height1, click1, visible1 = true, rect1 = true) {
    this.text = text1;
    this.x = x1;
    this.y = y1;
    this.width = width1;
    this.height = height1;
    this.click = click1;
    this.visible = visible1;
    this.rect = rect1;
  }

  draw() {
    if (!this.visible) {
      return;
    }
    if (this.rect) {
      fill('white');
      rect(this.x, this.y, this.width, this.height);
      fill('black');
    } else {
      fill('white');
    }
    textSize(0.04 * height);
    return text(this.text, this.x, this.y);
  }

  inside(mx, my) {
    return (this.x - this.width / 2 < mx && mx < this.x + this.width / 2) && (this.y - this.height / 2 < my && my < this.y + this.height / 2);
  }

};

EditButton = class EditButton extends Button {
  constructor(text, x, y, click, visible) {
    super(text, x, y, 0.05 * width, 0.03 * height, click, visible);
    this.value = 0;
  }

  draw() {
    fill(['gray', 'yellow'][this.value]);
    textSize(0.04 * height);
    return text(this.text, this.x, this.y);
  }

};

MainButton = class MainButton extends Button {
  constructor(player1, x, y, width, height, click, visible) {
    super("", x, y, width, height, click, visible);
    this.player = player1;
  }

  draw() {
    var h, m, s, secs, ss;
    secs = clocks[this.player];
    if (secs === 0) {
      fill('red');
    }
    [h, m, s] = hms(Math.trunc(secs));
    ss = h >= 1 ? d2(h) + ':' + d2(m) : d2(m) + ':' + d2(s);
    if (state === 0 && player === -1) {
      fill('yellow');
    } else if (state === 1) {
      fill('white');
    } else {
      fill(player === this.player ? 'white' : "yellow");
    }
    rect(this.x, this.y, this.width, this.height);
    push();
    translate(this.x, this.y);
    if (this.upsidedown) {
      rotate(180);
    }
    textSize(0.22 * height);
    fill('black');
    text(ss, 0, 0.017 * height);
    return pop();
  }

};

draw = function() {
  return page.draw();
};

// push() # DEBUG!
// fill 'gray'
// textSize 0.03*height
// text round3(clocks[0]), 0.2 * width, 0.95 * height
// text "S:#{state}",      0.4 * width, 0.95 * height
// text Math.round(frameRate()), 0.5 * width, 0.95 * height
// text "P:#{player}",     0.6 * width, 0.95 * height
// text round3(clocks[1]), 0.8 * width, 0.95 * height
// pop()
preload = function() {
  return qr = loadImage('qr.png');
};

setup = function() {
  createCanvas(innerWidth, innerHeight);
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  angleMode(DEGREES);
  editPage = new EditPage();
  mainPage = new MainPage();
  return page = mainPage;
};

mouseClicked = function() {
  return page.mouseClicked();
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022\005-ChessClock\coffee\sketch.coffee