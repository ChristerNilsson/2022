// Generated by CoffeeScript 2.7.0
var crlf, getLocalCoords, round3, svgdefs, svggrid, svgline, svgrect, svgtext, svguse;

import {
  globals,
  invert
} from './globals.js';

//export ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz' # spelare
// halvborden heter 1..52. Jämn är vit, udda är svart
export var grid = function(xoff, dx, nx, yoff, dy, ny) {
  var i, k, l, len, len1, ref, ref1, results;
  ref = range(ny + 1);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    line(xoff, yoff + dy * i, xoff + nx * dx, yoff + dy * i);
  }
  ref1 = range(nx + 1);
  results = [];
  for (l = 0, len1 = ref1.length; l < len1; l++) {
    i = ref1[l];
    results.push(line(xoff + dx * i, yoff, xoff + dx * i, yoff + ny * dy));
  }
  return results;
};

export var saveData = function() {
  var a;
  a = document.createElement("a");
  //document.body.appendChild a # Skapar många downloads
  a.style = "display: none";
  return (data, fileName) => {
    var blob, url;
    blob = new Blob([data], {
      type: "octet/stream"
    });
    url = window.URL.createObjectURL(blob);
    a.href = url;
    a.download = fileName;
    a.click();
    return window.URL.revokeObjectURL(url);
  };
};

crlf = "\n";

round3 = function(x) {
  return Math.round(1000 * x) / 1000;
};

svgline = function(x1, y1, x2, y2) {
  return `<line x1=\"${x1}\" y1=\"${y1}\" x2=\"${x2}\" y2=\"${y2}\" stroke=\"black\"/>`;
};

svgrect = function(x, y, width, height) {
  return `<rect x=\"${x}\" y=\"${y}\" width=\"${width}\" height=\"${height}\" stroke=\"black\" fill-opacity=\"0.1\" />`;
};

svgtext = function(text, x, y, ta = 'middle', ts = 2) {
  return `<text font-size=\"${round3(ts)}em\" text-anchor=\"${ta}\" x=\"${x}\" y=\"${y}\">${text}</text>`;
};

svgdefs = function(id, body) {
  return crlf + "<defs>" + crlf + `<g id=\"${id}\" >` + crlf + body + "</g>" + crlf + "</defs>" + crlf;
};

svguse = function(id, x, y, skalax, skalay) {
  return `<use href=\"#${id}\" x=\"${x}\" y=\"${y}\" transform=\"scale(${skalax} ${skalay})\" />` + crlf;
};

svggrid = function(headers, ws, digits, n, dx, dy, totalWidth) {
  var anchor, big, digit, dist, i, j, k, l, len, len1, len2, len3, len4, m, medium, o, q, ref, ref1, ref2, ref3, ref4, res, row, small, ts, x0, y, y0;
  headers = headers.split(' ');
  res = [];
  res.push("<style> text {font-family: Helvetica, sans-serif;}</style>");
  x0 = 0;
  y = dy;
  big = 1.00 * dx / 30;
  medium = 0.75 * dx / 30;
  small = 0.50 * dx / 30;
  ref = range(headers.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    res.push(svgline(x0, y - dy, x0, y + dy * n));
    res.push(svgtext(headers[i], x0 + ws[i] / 2, 0.75 * dy, 'middle', big));
    x0 += ws[i];
  }
  res.push(svgline(x0, y - dy, x0, y + dy * n));
  ref1 = range(-1, n + 1);
  for (l = 0, len1 = ref1.length; l < len1; l++) {
    i = ref1[l];
    res.push(svgline(0, y + dy * i, x0, y + dy * i));
  }
  ref2 = range(n);
  for (m = 0, len2 = ref2.length; m < len2; m++) {
    i = ref2[m];
    res.push(svgtext(i + 1, 0.5 * dx, y + dy * i + dy * 0.7, 'middle', big));
  }
  ref3 = range(digits.length);
  for (o = 0, len3 = ref3.length; o < len3; o++) {
    i = ref3[o];
    row = digits[i];
    x0 = ws[0] + ws[1] + dx * i + 0.5 * dx;
    ref4 = range(row.length);
    for (q = 0, len4 = ref4.length; q < len4; q++) {
      j = ref4[q];
      y0 = y + dy * j + 0.28 * dy;
      digit = row[j];
      if (digit < 0) {
        anchor = 'start';
        digit = -digit;
        dist = -dx * 0.45;
      } else {
        anchor = 'end';
        dist = dx * 0.45;
      }
      res.push(svgtext(digit, x0 + dist, y0, anchor, ts = small));
    }
  }
  res.push(svgtext('Round Robin', 0, dy * (n + 1.4), 'start', small));
  res.push(svgtext('Observera att placeringarna utgörs av BORDSNUMMER', totalWidth / 2, dy * (n + 1.4), 'middle', small));
  res.push(svgtext('Christer Nilsson', totalWidth, dy * (n + 1.4), 'end', small));
  return res.join(crlf);
};

export var bergerSVG = function(w, h) {
  var a, antalRonder, antalSpelare, b, c, dx, dy, i, j, k, l, len, len1, len2, len3, len4, len5, m, nx, ny, o, p, q, r, ref, ref1, ref2, ref3, ref4, res, skalax, skalay, spelare, tables, totalHeight, totalWidth, white, ws;
  tables = [];
  antalSpelare = globals.ronder[0].length; // antal spelare, alltid jämnt
  antalRonder = antalSpelare - 1;
  ref = range(antalRonder);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    spelare = invert(globals.ronder[i]);
    ref1 = range(antalSpelare);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j = ref1[l];
      p = spelare[j];
      white = p % 2 === 0;
      if (p >= antalSpelare / 2) {
        p = antalRonder - p;
      }
      if (white) {
        p = p + 1;
      } else {
        p = -p - 1;
      }
      spelare[j] = p;
    }
    tables.push(spelare);
  }
  res = 'Nr Namn';
  dx = 1000 / globals.N;
  if (dx > 50) {
    dx = 50;
  }
  dy = 0.75 * dx;
  ws = [dx, 200];
  ref2 = range(globals.N - 1);
  for (m = 0, len2 = ref2.length; m < len2; m++) {
    i = ref2[m];
    res += ` ${i + 1}`;
    ws.push(dx);
  }
  res += ' Poäng Plats';
  ws.push(dx + dx);
  ws.push(dx + dx);
  totalWidth = 0;
  for (o = 0, len3 = ws.length; o < len3; o++) {
    w = ws[o];
    totalWidth += w;
  }
  totalHeight = dy * (globals.N + 2);
  a = svggrid(res, ws, tables, globals.N, dx, dy, totalWidth);
  b = svgdefs("berger", a);
  c = b;
  totalWidth += dx;
  [nx, ny] = [1, 1];
  if (globals.N === 4) {
    [nx, ny] = [2, 4];
  }
  if (globals.N === 6) {
    [nx, ny] = [2, 3];
  }
  if (globals.N === 8) {
    [nx, ny] = [2, 3];
  }
  if (globals.N === 10) {
    [nx, ny] = [2, 2];
  }
  if (globals.N === 12) {
    [nx, ny] = [2, 2];
  }
  //c += svgrect 0,0,1625,1140
  skalax = 1625 / nx / totalWidth;
  skalay = 1140 / ny / totalHeight;
  ref3 = range(nx);
  for (q = 0, len4 = ref3.length; q < len4; q++) {
    i = ref3[q];
    ref4 = range(ny);
    for (r = 0, len5 = ref4.length; r < len5; r++) {
      j = ref4[r];
      c += svguse("berger", i * totalWidth, j * totalHeight, skalax, skalay);
    }
  }
  return `<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 ${1630} ${1140}' >` + c + '</svg>';
};

getLocalCoords = function() {
  var matrix, pd;
  matrix = drawingContext.getTransform();
  pd = pixelDensity();
  return matrix.inverse().transformPoint(new DOMPoint(mouseX * pd, mouseY * pd));
};

export var setState = function(key) {
  return globals.currState = globals.states[key];
};

export var setN = function(delta) {
  var N, k, key, len, players, ref, ref1, results, rond, state;
  if ((4 <= (ref = globals.N + delta) && ref <= 52)) {
    globals.N += delta;
    globals.rond = 0;
    N = globals.N;
    globals.ronder = [];
    ref1 = range(N - 1);
    for (k = 0, len = ref1.length; k < len; k++) {
      rond = ref1[k];
      players = range(N - 1);
      players = players.slice(N - 1 - rond).concat(players.slice(0, N - 1 - rond));
      players.push(N - 1);
      if (rond % 2 === 1) {
        [players[0], players[N - 1]] = [players[N - 1], players[0]];
      }
      globals.ronder.push(players);
    }
    results = [];
    for (key in globals.states) {
      state = globals.states[key];
      results.push(state.setN());
    }
    return results;
  }
};

export var State = class State {
  constructor(name) {
    this.name = name;
    this.setN();
  }

  drawControls() {
    var key, results;
    results = [];
    for (key in this.controls) {
      results.push(this.controls[key].draw());
    }
    return results;
  }

  mouseClicked() {
    var control, key, results, x, y;
    ({x, y} = getLocalCoords());
    results = [];
    for (key in this.controls) {
      control = this.controls[key];
      if (control.visible && !control.disabled && control.inside(x, y)) {
        if (control.click) {
          control.click();
        }
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGVzLmpzIiwic291cmNlUm9vdCI6Ii4uXFwiLCJzb3VyY2VzIjpbImNvZmZlZVxcc3RhdGVzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxJQUFBLEVBQUEsY0FBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBOztBQUFBLE9BQUE7RUFBUSxPQUFSO0VBQWdCLE1BQWhCO0NBQUEsTUFBQSxlQUFBOzs7O0FBS0EsT0FBQSxJQUFPLElBQUEsR0FBTyxRQUFBLENBQUMsSUFBRCxFQUFNLEVBQU4sRUFBUyxFQUFULEVBQWEsSUFBYixFQUFrQixFQUFsQixFQUFxQixFQUFyQixDQUFBO0FBQ2QsTUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUE7QUFBQztFQUFBLEtBQUEscUNBQUE7O0lBQUEsSUFBQSxDQUFLLElBQUwsRUFBZ0IsSUFBQSxHQUFLLEVBQUEsR0FBRyxDQUF4QixFQUEyQixJQUFBLEdBQUssRUFBQSxHQUFHLEVBQW5DLEVBQXVDLElBQUEsR0FBSyxFQUFBLEdBQUcsQ0FBL0M7RUFBQTtBQUNBO0FBQUE7RUFBQSxLQUFBLHdDQUFBOztpQkFBQSxJQUFBLENBQUssSUFBQSxHQUFLLEVBQUEsR0FBRyxDQUFiLEVBQWdCLElBQWhCLEVBQTJCLElBQUEsR0FBSyxFQUFBLEdBQUcsQ0FBbkMsRUFBdUMsSUFBQSxHQUFLLEVBQUEsR0FBRyxFQUEvQztFQUFBLENBQUE7O0FBRmE7O0FBSWQsT0FBQSxJQUFPLFFBQUEsR0FBVyxRQUFBLENBQUEsQ0FBQTtBQUNsQixNQUFBO0VBQUMsQ0FBQSxHQUFJLFFBQVEsQ0FBQyxhQUFULENBQXVCLEdBQXZCLEVBQUw7O0VBRUMsQ0FBQyxDQUFDLEtBQUYsR0FBVTtBQUNWLFNBQU8sQ0FBQyxJQUFELEVBQU8sUUFBUCxDQUFBLEdBQUE7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LENBQUE7O0VBRmM7O0FBSlQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2dsb2JhbHMsaW52ZXJ0fSBmcm9tICcuL2dsb2JhbHMuanMnXHJcblxyXG4jZXhwb3J0IEFMUEhBQkVUID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonICMgc3BlbGFyZVxyXG4jIGhhbHZib3JkZW4gaGV0ZXIgMS4uNTIuIErDpG1uIMOkciB2aXQsIHVkZGEgw6RyIHN2YXJ0XHJcblxyXG5leHBvcnQgZ3JpZCA9ICh4b2ZmLGR4LG54LCB5b2ZmLGR5LG55KSAtPlxyXG5cdGxpbmUgeG9mZiwgICAgICB5b2ZmK2R5KmksIHhvZmYrbngqZHgsIHlvZmYrZHkqaSAgZm9yIGkgaW4gcmFuZ2UgbnkrMVxyXG5cdGxpbmUgeG9mZitkeCppLCB5b2ZmLCAgICAgIHhvZmYrZHgqaSwgIHlvZmYrbnkqZHkgZm9yIGkgaW4gcmFuZ2UgbngrMVxyXG5cclxuZXhwb3J0IHNhdmVEYXRhID0gLT5cclxuXHRhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBcImFcIlxyXG5cdCNkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkIGEgIyBTa2FwYXIgbcOlbmdhIGRvd25sb2Fkc1xyXG5cdGEuc3R5bGUgPSBcImRpc3BsYXk6IG5vbmVcIlxyXG5cdHJldHVybiAoZGF0YSwgZmlsZU5hbWUpID0+XHJcblx0XHRibG9iID0gbmV3IEJsb2IgW2RhdGFdLCB7dHlwZTogXCJvY3RldC9zdHJlYW1cIn1cclxuXHRcdHVybCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMIGJsb2JcclxuXHRcdGEuaHJlZiA9IHVybFxyXG5cdFx0YS5kb3dubG9hZCA9IGZpbGVOYW1lXHJcblx0XHRhLmNsaWNrKClcclxuXHRcdHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMIHVybFxyXG5cclxuY3JsZiA9IFwiXFxuXCJcclxucm91bmQzID0gKHgpIC0+IE1hdGgucm91bmQoMTAwMCp4KS8xMDAwXHJcblxyXG5zdmdsaW5lID0gKHgxLHkxLHgyLHkyKSAtPiBcIjxsaW5lIHgxPVxcXCIje3gxfVxcXCIgeTE9XFxcIiN7eTF9XFxcIiB4Mj1cXFwiI3t4Mn1cXFwiIHkyPVxcXCIje3kyfVxcXCIgc3Ryb2tlPVxcXCJibGFja1xcXCIvPlwiXHJcbnN2Z3JlY3QgPSAoeCx5LHdpZHRoLGhlaWdodCkgLT4gXCI8cmVjdCB4PVxcXCIje3h9XFxcIiB5PVxcXCIje3l9XFxcIiB3aWR0aD1cXFwiI3t3aWR0aH1cXFwiIGhlaWdodD1cXFwiI3toZWlnaHR9XFxcIiBzdHJva2U9XFxcImJsYWNrXFxcIiBmaWxsLW9wYWNpdHk9XFxcIjAuMVxcXCIgLz5cIlxyXG5zdmd0ZXh0ID0gKHRleHQseCx5LHRhPSdtaWRkbGUnLHRzPTIpIC0+IFwiPHRleHQgZm9udC1zaXplPVxcXCIje3JvdW5kMyB0c31lbVxcXCIgdGV4dC1hbmNob3I9XFxcIiN7dGF9XFxcIiB4PVxcXCIje3h9XFxcIiB5PVxcXCIje3l9XFxcIj4je3RleHR9PC90ZXh0PlwiXHJcbnN2Z2RlZnMgPSAoaWQsYm9keSkgLT4gY3JsZiArIFwiPGRlZnM+XCIgKyBjcmxmICsgXCI8ZyBpZD1cXFwiI3tpZH1cXFwiID5cIiArIGNybGYgKyBib2R5ICsgXCI8L2c+XCIrIGNybGYgKyBcIjwvZGVmcz5cIiArIGNybGZcclxuc3ZndXNlICA9IChpZCx4LHksc2thbGF4LHNrYWxheSkgLT4gXCI8dXNlIGhyZWY9XFxcIiMje2lkfVxcXCIgeD1cXFwiI3t4fVxcXCIgeT1cXFwiI3t5fVxcXCIgdHJhbnNmb3JtPVxcXCJzY2FsZSgje3NrYWxheH0gI3tza2FsYXl9KVxcXCIgLz5cIiArIGNybGZcclxuXHJcbnN2Z2dyaWQgPSAoaGVhZGVycyx3cyxkaWdpdHMsbixkeCxkeSx0b3RhbFdpZHRoKSAtPlxyXG5cdGhlYWRlcnMgPSBoZWFkZXJzLnNwbGl0ICcgJ1xyXG5cdHJlcyA9IFtdXHJcblx0cmVzLnB1c2ggXCI8c3R5bGU+IHRleHQge2ZvbnQtZmFtaWx5OiBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7fTwvc3R5bGU+XCJcclxuXHJcblx0eDAgPSAwXHJcblx0eSA9IGR5XHJcblx0YmlnICAgID0gMS4wMCpkeC8zMFxyXG5cdG1lZGl1bSA9IDAuNzUqZHgvMzBcclxuXHRzbWFsbCAgPSAwLjUwKmR4LzMwXHJcblx0Zm9yIGkgaW4gcmFuZ2UgaGVhZGVycy5sZW5ndGhcclxuXHRcdHJlcy5wdXNoIHN2Z2xpbmUgeDAseS1keSx4MCx5K2R5Km5cclxuXHRcdHJlcy5wdXNoIHN2Z3RleHQgaGVhZGVyc1tpXSx4MCt3c1tpXS8yLDAuNzUqZHksJ21pZGRsZScsYmlnXHJcblx0XHR4MCArPSB3c1tpXVxyXG5cdHJlcy5wdXNoIHN2Z2xpbmUgeDAseS1keSx4MCx5K2R5Km5cclxuXHJcblx0Zm9yIGkgaW4gcmFuZ2UgLTEsbisxXHJcblx0XHRyZXMucHVzaCBzdmdsaW5lIDAseStkeSppLHgwLHkrZHkqaVxyXG5cdGZvciBpIGluIHJhbmdlIG5cclxuXHRcdHJlcy5wdXNoIHN2Z3RleHQgaSsxLDAuNSpkeCx5K2R5KmkrZHkqMC43LCdtaWRkbGUnLGJpZ1xyXG5cclxuXHRmb3IgaSBpbiByYW5nZSBkaWdpdHMubGVuZ3RoXHJcblx0XHRyb3cgPSBkaWdpdHNbaV1cclxuXHRcdHgwID0gd3NbMF0gKyB3c1sxXSArIGR4KmkgKyAwLjUqZHhcclxuXHRcdGZvciBqIGluIHJhbmdlIHJvdy5sZW5ndGhcclxuXHRcdFx0eTAgPSB5ICsgZHkqaiArIDAuMjgqZHlcclxuXHRcdFx0ZGlnaXQgPSByb3dbal1cclxuXHRcdFx0aWYgZGlnaXQgPCAwXHJcblx0XHRcdFx0YW5jaG9yID0gJ3N0YXJ0J1xyXG5cdFx0XHRcdGRpZ2l0ID0gLWRpZ2l0XHJcblx0XHRcdFx0ZGlzdCA9IC1keCowLjQ1XHJcblx0XHRcdGVsc2UgXHJcblx0XHRcdFx0YW5jaG9yID0gJ2VuZCdcclxuXHRcdFx0XHRkaXN0ID0gZHgqMC40NVxyXG5cdFx0XHRyZXMucHVzaCBzdmd0ZXh0IGRpZ2l0LHgwK2Rpc3QseTAsYW5jaG9yLHRzPXNtYWxsXHJcblx0cmVzLnB1c2ggc3ZndGV4dCAnUm91bmQgUm9iaW4nLDAsZHkqKG4rMS40KSwnc3RhcnQnLHNtYWxsXHJcblx0cmVzLnB1c2ggc3ZndGV4dCAnT2JzZXJ2ZXJhIGF0dCBwbGFjZXJpbmdhcm5hIHV0Z8O2cnMgYXYgQk9SRFNOVU1NRVInLHRvdGFsV2lkdGgvMixkeSoobisxLjQpLCdtaWRkbGUnLHNtYWxsXHJcblx0cmVzLnB1c2ggc3ZndGV4dCAnQ2hyaXN0ZXIgTmlsc3NvbicsdG90YWxXaWR0aCxkeSoobisxLjQpLCdlbmQnLHNtYWxsXHJcblx0cmVzLmpvaW4gY3JsZlxyXG5cclxuZXhwb3J0IGJlcmdlclNWRyA9ICh3LGgpIC0+XHJcblx0dGFibGVzID0gW11cclxuXHRhbnRhbFNwZWxhcmUgPSBnbG9iYWxzLnJvbmRlclswXS5sZW5ndGggIyBhbnRhbCBzcGVsYXJlLCBhbGx0aWQgasOkbW50XHJcblx0YW50YWxSb25kZXIgPSBhbnRhbFNwZWxhcmUgLSAxXHJcblx0Zm9yIGkgaW4gcmFuZ2UgYW50YWxSb25kZXJcclxuXHRcdHNwZWxhcmUgPSBpbnZlcnQgZ2xvYmFscy5yb25kZXJbaV1cclxuXHRcdGZvciBqIGluIHJhbmdlIGFudGFsU3BlbGFyZVxyXG5cdFx0XHRwID0gc3BlbGFyZVtqXVxyXG5cdFx0XHR3aGl0ZSA9IHAgJSAyID09IDBcclxuXHRcdFx0aWYgcCA+PSBhbnRhbFNwZWxhcmUvMiB0aGVuIHAgPSBhbnRhbFJvbmRlci1wXHJcblx0XHRcdGlmIHdoaXRlIHRoZW4gcCA9IHArMSBlbHNlIHA9LXAtMVxyXG5cdFx0XHRzcGVsYXJlW2pdID0gcFxyXG5cdFx0dGFibGVzLnB1c2ggc3BlbGFyZVxyXG5cclxuXHRyZXMgPSAnTnIgTmFtbidcclxuXHRkeCA9IDEwMDAvZ2xvYmFscy5OXHJcblx0aWYgZHg+NTAgdGhlbiBkeD01MFxyXG5cdGR5ID0gMC43NSAqIGR4XHJcblx0d3MgPSBbZHgsMjAwXVxyXG5cdGZvciBpIGluIHJhbmdlIGdsb2JhbHMuTi0xXHJcblx0XHRyZXMgKz0gXCIgI3tpKzF9XCJcclxuXHRcdHdzLnB1c2ggZHhcclxuXHRyZXMgKz0gJyBQb8OkbmcgUGxhdHMnXHJcblx0d3MucHVzaCBkeCtkeFxyXG5cdHdzLnB1c2ggZHgrZHggXHJcblx0dG90YWxXaWR0aCA9IDBcclxuXHR0b3RhbFdpZHRoICs9IHcgZm9yIHcgaW4gd3NcclxuXHR0b3RhbEhlaWdodCA9IGR5ICogKGdsb2JhbHMuTiArIDIpXHJcblxyXG5cdGEgPSBzdmdncmlkIHJlcyx3cyx0YWJsZXMsZ2xvYmFscy5OLGR4LGR5LHRvdGFsV2lkdGhcclxuXHRiID0gc3ZnZGVmcyBcImJlcmdlclwiLCBhXHJcblx0YyA9IGJcclxuXHJcblx0dG90YWxXaWR0aCArPSBkeFxyXG5cclxuXHRbbngsbnldID0gWzEsMV1cclxuXHRpZiBnbG9iYWxzLk4gPT0gIDQgdGhlbiBbbngsbnldID0gWzIsNF1cclxuXHRpZiBnbG9iYWxzLk4gPT0gIDYgdGhlbiBbbngsbnldID0gWzIsM11cclxuXHRpZiBnbG9iYWxzLk4gPT0gIDggdGhlbiBbbngsbnldID0gWzIsM11cclxuXHRpZiBnbG9iYWxzLk4gPT0gMTAgdGhlbiBbbngsbnldID0gWzIsMl1cclxuXHRpZiBnbG9iYWxzLk4gPT0gMTIgdGhlbiBbbngsbnldID0gWzIsMl1cclxuXHJcblx0I2MgKz0gc3ZncmVjdCAwLDAsMTYyNSwxMTQwXHJcblxyXG5cdHNrYWxheCA9IDE2MjUvbnggLyB0b3RhbFdpZHRoXHJcblx0c2thbGF5ID0gMTE0MC9ueSAvIHRvdGFsSGVpZ2h0XHJcblxyXG5cdGZvciBpIGluIHJhbmdlIG54XHJcblx0XHRmb3IgaiBpbiByYW5nZSBueVxyXG5cdFx0XHRjICs9IHN2Z3VzZSBcImJlcmdlclwiLCBpKnRvdGFsV2lkdGgsIGoqdG90YWxIZWlnaHQsIHNrYWxheCwgc2thbGF5XHJcblx0XCI8c3ZnIHZlcnNpb249JzEuMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycgdmlld0JveD0nMCAwICN7MTYzMH0gI3sxMTQwfScgPlwiICsgYyArICc8L3N2Zz4nXHJcblxyXG5nZXRMb2NhbENvb3JkcyA9IC0+XHJcblx0bWF0cml4ID0gZHJhd2luZ0NvbnRleHQuZ2V0VHJhbnNmb3JtKClcclxuXHRwZCA9IHBpeGVsRGVuc2l0eSgpXHJcblx0bWF0cml4LmludmVyc2UoKS50cmFuc2Zvcm1Qb2ludCBuZXcgRE9NUG9pbnQgbW91c2VYICogcGQsbW91c2VZICogcGRcclxuXHJcbmV4cG9ydCBzZXRTdGF0ZSA9IChrZXkpIC0+IGdsb2JhbHMuY3VyclN0YXRlID0gZ2xvYmFscy5zdGF0ZXNba2V5XVxyXG5cclxuZXhwb3J0IHNldE4gPSAoZGVsdGEpIC0+XHJcblx0aWYgNCA8PSBnbG9iYWxzLk4gKyBkZWx0YSA8PSA1MlxyXG5cdFx0Z2xvYmFscy5OICs9IGRlbHRhXHJcblx0XHRnbG9iYWxzLnJvbmQgPSAwXHJcblxyXG5cdFx0TiA9IGdsb2JhbHMuTlxyXG5cdFx0Z2xvYmFscy5yb25kZXIgPSBbXVxyXG5cdFx0Zm9yIHJvbmQgaW4gcmFuZ2UgTi0xXHJcblx0XHRcdHBsYXllcnMgPSByYW5nZSBOLTFcclxuXHRcdFx0cGxheWVycyA9IHBsYXllcnMuc2xpY2UoTi0xLXJvbmQpLmNvbmNhdCBwbGF5ZXJzLnNsaWNlKDAsTi0xLXJvbmQpXHJcblx0XHRcdHBsYXllcnMucHVzaCBOLTFcclxuXHRcdFx0aWYgcm9uZCUyPT0xIHRoZW4gW3BsYXllcnNbMF0scGxheWVyc1tOLTFdXSA9IFtwbGF5ZXJzW04tMV0scGxheWVyc1swXV1cclxuXHRcdFx0Z2xvYmFscy5yb25kZXIucHVzaCBwbGF5ZXJzXHJcblx0XHRmb3Iga2V5IG9mIGdsb2JhbHMuc3RhdGVzXHJcblx0XHRcdHN0YXRlID0gZ2xvYmFscy5zdGF0ZXNba2V5XVxyXG5cdFx0XHRzdGF0ZS5zZXROKClcclxuXHJcbmV4cG9ydCBjbGFzcyBTdGF0ZVxyXG5cdGNvbnN0cnVjdG9yIDogKEBuYW1lKSAtPiBAc2V0TigpXHJcblx0ZHJhd0NvbnRyb2xzIDogLT4gQGNvbnRyb2xzW2tleV0uZHJhdygpIGZvciBrZXkgb2YgQGNvbnRyb2xzXHJcblxyXG5cdG1vdXNlQ2xpY2tlZCA6IC0+XHJcblx0XHR7eCx5fSA9IGdldExvY2FsQ29vcmRzKClcclxuXHRcdGZvciBrZXkgb2YgQGNvbnRyb2xzXHJcblx0XHRcdGNvbnRyb2wgPSBAY29udHJvbHNba2V5XVxyXG5cdFx0XHRpZiBjb250cm9sLnZpc2libGUgYW5kIG5vdCBjb250cm9sLmRpc2FibGVkIGFuZCBjb250cm9sLmluc2lkZSB4LCB5XHJcblx0XHRcdFx0aWYgY29udHJvbC5jbGljayB0aGVuIGNvbnRyb2wuY2xpY2soKVxyXG5cdFx0XHRcdGJyZWFrXHJcbiJdfQ==
//# sourceURL=c:\github\2022\008-Berger\coffee\states.coffee